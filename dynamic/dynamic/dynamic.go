// Code generated by goctl. DO NOT EDIT.
// Source: dynamic.proto

package dynamic

import (
	"context"

	"git.154896.xyz/zhifou/dynamic/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Attachment      = pb.Attachment
	CommonResp      = pb.CommonResp
	FindManyReq     = pb.FindManyReq
	FindManyReqResp = pb.FindManyReqResp
	FindOneReq      = pb.FindOneReq
	FindOneResp     = pb.FindOneResp
	GetDynamicReq   = pb.GetDynamicReq
	GetDynamicResp  = pb.GetDynamicResp
	InsertPostReq   = pb.InsertPostReq
	InsertPostResp  = pb.InsertPostResp
	QueryTagReq     = pb.QueryTagReq
	QueryTagResp    = pb.QueryTagResp
	QueryUserReq    = pb.QueryUserReq
	QueryUserResp   = pb.QueryUserResp
	Tag             = pb.Tag

	Dynamic interface {
		InsertPost(ctx context.Context, in *InsertPostReq, opts ...grpc.CallOption) (*InsertPostResp, error)
		GetDynamic(ctx context.Context, in *GetDynamicReq, opts ...grpc.CallOption) (*GetDynamicResp, error)
		FindPost(ctx context.Context, in *FindOneReq, opts ...grpc.CallOption) (*FindOneResp, error)
		FindMany(ctx context.Context, in *FindManyReq, opts ...grpc.CallOption) (*FindManyReqResp, error)
		QueryTag(ctx context.Context, in *QueryTagReq, opts ...grpc.CallOption) (*QueryTagResp, error)
		QueryUser(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserResp, error)
	}

	defaultDynamic struct {
		cli zrpc.Client
	}
)

func NewDynamic(cli zrpc.Client) Dynamic {
	return &defaultDynamic{
		cli: cli,
	}
}

func (m *defaultDynamic) InsertPost(ctx context.Context, in *InsertPostReq, opts ...grpc.CallOption) (*InsertPostResp, error) {
	client := pb.NewDynamicClient(m.cli.Conn())
	return client.InsertPost(ctx, in, opts...)
}

func (m *defaultDynamic) GetDynamic(ctx context.Context, in *GetDynamicReq, opts ...grpc.CallOption) (*GetDynamicResp, error) {
	client := pb.NewDynamicClient(m.cli.Conn())
	return client.GetDynamic(ctx, in, opts...)
}

func (m *defaultDynamic) FindPost(ctx context.Context, in *FindOneReq, opts ...grpc.CallOption) (*FindOneResp, error) {
	client := pb.NewDynamicClient(m.cli.Conn())
	return client.FindPost(ctx, in, opts...)
}

func (m *defaultDynamic) FindMany(ctx context.Context, in *FindManyReq, opts ...grpc.CallOption) (*FindManyReqResp, error) {
	client := pb.NewDynamicClient(m.cli.Conn())
	return client.FindMany(ctx, in, opts...)
}

func (m *defaultDynamic) QueryTag(ctx context.Context, in *QueryTagReq, opts ...grpc.CallOption) (*QueryTagResp, error) {
	client := pb.NewDynamicClient(m.cli.Conn())
	return client.QueryTag(ctx, in, opts...)
}

func (m *defaultDynamic) QueryUser(ctx context.Context, in *QueryUserReq, opts ...grpc.CallOption) (*QueryUserResp, error) {
	client := pb.NewDynamicClient(m.cli.Conn())
	return client.QueryUser(ctx, in, opts...)
}
