// Code generated by goctl. DO NOT EDIT.
// Source: dynamic.proto

package server

import (
	"context"

	"git.154896.xyz/zhifou/dynamic/internal/logic"
	"git.154896.xyz/zhifou/dynamic/internal/svc"
	"git.154896.xyz/zhifou/dynamic/pb"
)

type DynamicServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedDynamicServer
}

func NewDynamicServer(svcCtx *svc.ServiceContext) *DynamicServer {
	return &DynamicServer{
		svcCtx: svcCtx,
	}
}

func (s *DynamicServer) InsertPost(ctx context.Context, in *pb.InsertPostReq) (*pb.InsertPostResp, error) {
	l := logic.NewInsertPostLogic(ctx, s.svcCtx)
	return l.InsertPost(in)
}

func (s *DynamicServer) GetDynamic(ctx context.Context, in *pb.GetDynamicReq) (*pb.GetDynamicResp, error) {
	l := logic.NewGetDynamicLogic(ctx, s.svcCtx)
	return l.GetDynamic(in)
}

func (s *DynamicServer) FindPost(ctx context.Context, in *pb.FindOneReq) (*pb.FindOneResp, error) {
	l := logic.NewFindPostLogic(ctx, s.svcCtx)
	return l.FindPost(in)
}

func (s *DynamicServer) FindMany(ctx context.Context, in *pb.FindManyReq) (*pb.FindManyReqResp, error) {
	l := logic.NewFindManyLogic(ctx, s.svcCtx)
	return l.FindMany(in)
}

func (s *DynamicServer) QueryTag(ctx context.Context, in *pb.QueryTagReq) (*pb.QueryTagResp, error) {
	l := logic.NewQueryTagLogic(ctx, s.svcCtx)
	return l.QueryTag(in)
}

func (s *DynamicServer) QueryUser(ctx context.Context, in *pb.QueryUserReq) (*pb.QueryUserResp, error) {
	l := logic.NewQueryUserLogic(ctx, s.svcCtx)
	return l.QueryUser(in)
}
