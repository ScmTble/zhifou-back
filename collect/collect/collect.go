// Code generated by goctl. DO NOT EDIT.
// Source: collect.proto

package collect

import (
	"context"

	"git.154896.xyz/zhifou/collect/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetCollectReq     = pb.GetCollectReq
	GetCollectResp    = pb.GetCollectResp
	GetNumReq         = pb.GetNumReq
	GetNumResp        = pb.GetNumResp
	GetStatusReq      = pb.GetStatusReq
	GetStatusResp     = pb.GetStatusResp
	InsertCollectReq  = pb.InsertCollectReq
	InsertCollectResp = pb.InsertCollectResp

	Collect interface {
		InsertCollect(ctx context.Context, in *InsertCollectReq, opts ...grpc.CallOption) (*InsertCollectResp, error)
		GetCollect(ctx context.Context, in *GetCollectReq, opts ...grpc.CallOption) (*GetCollectResp, error)
		GetStatus(ctx context.Context, in *GetStatusReq, opts ...grpc.CallOption) (*GetStatusResp, error)
		GetNum(ctx context.Context, in *GetNumReq, opts ...grpc.CallOption) (*GetNumResp, error)
	}

	defaultCollect struct {
		cli zrpc.Client
	}
)

func NewCollect(cli zrpc.Client) Collect {
	return &defaultCollect{
		cli: cli,
	}
}

func (m *defaultCollect) InsertCollect(ctx context.Context, in *InsertCollectReq, opts ...grpc.CallOption) (*InsertCollectResp, error) {
	client := pb.NewCollectClient(m.cli.Conn())
	return client.InsertCollect(ctx, in, opts...)
}

func (m *defaultCollect) GetCollect(ctx context.Context, in *GetCollectReq, opts ...grpc.CallOption) (*GetCollectResp, error) {
	client := pb.NewCollectClient(m.cli.Conn())
	return client.GetCollect(ctx, in, opts...)
}

func (m *defaultCollect) GetStatus(ctx context.Context, in *GetStatusReq, opts ...grpc.CallOption) (*GetStatusResp, error) {
	client := pb.NewCollectClient(m.cli.Conn())
	return client.GetStatus(ctx, in, opts...)
}

func (m *defaultCollect) GetNum(ctx context.Context, in *GetNumReq, opts ...grpc.CallOption) (*GetNumResp, error) {
	client := pb.NewCollectClient(m.cli.Conn())
	return client.GetNum(ctx, in, opts...)
}
