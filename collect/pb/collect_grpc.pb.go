// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: collect.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Collect_InsertCollect_FullMethodName = "/collect.Collect/InsertCollect"
	Collect_GetCollect_FullMethodName    = "/collect.Collect/GetCollect"
	Collect_GetStatus_FullMethodName     = "/collect.Collect/GetStatus"
	Collect_GetNum_FullMethodName        = "/collect.Collect/GetNum"
)

// CollectClient is the client API for Collect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectClient interface {
	InsertCollect(ctx context.Context, in *InsertCollectReq, opts ...grpc.CallOption) (*InsertCollectResp, error)
	GetCollect(ctx context.Context, in *GetCollectReq, opts ...grpc.CallOption) (*GetCollectResp, error)
	GetStatus(ctx context.Context, in *GetStatusReq, opts ...grpc.CallOption) (*GetStatusResp, error)
	GetNum(ctx context.Context, in *GetNumReq, opts ...grpc.CallOption) (*GetNumResp, error)
}

type collectClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectClient(cc grpc.ClientConnInterface) CollectClient {
	return &collectClient{cc}
}

func (c *collectClient) InsertCollect(ctx context.Context, in *InsertCollectReq, opts ...grpc.CallOption) (*InsertCollectResp, error) {
	out := new(InsertCollectResp)
	err := c.cc.Invoke(ctx, Collect_InsertCollect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectClient) GetCollect(ctx context.Context, in *GetCollectReq, opts ...grpc.CallOption) (*GetCollectResp, error) {
	out := new(GetCollectResp)
	err := c.cc.Invoke(ctx, Collect_GetCollect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectClient) GetStatus(ctx context.Context, in *GetStatusReq, opts ...grpc.CallOption) (*GetStatusResp, error) {
	out := new(GetStatusResp)
	err := c.cc.Invoke(ctx, Collect_GetStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectClient) GetNum(ctx context.Context, in *GetNumReq, opts ...grpc.CallOption) (*GetNumResp, error) {
	out := new(GetNumResp)
	err := c.cc.Invoke(ctx, Collect_GetNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectServer is the server API for Collect service.
// All implementations must embed UnimplementedCollectServer
// for forward compatibility
type CollectServer interface {
	InsertCollect(context.Context, *InsertCollectReq) (*InsertCollectResp, error)
	GetCollect(context.Context, *GetCollectReq) (*GetCollectResp, error)
	GetStatus(context.Context, *GetStatusReq) (*GetStatusResp, error)
	GetNum(context.Context, *GetNumReq) (*GetNumResp, error)
	mustEmbedUnimplementedCollectServer()
}

// UnimplementedCollectServer must be embedded to have forward compatible implementations.
type UnimplementedCollectServer struct {
}

func (UnimplementedCollectServer) InsertCollect(context.Context, *InsertCollectReq) (*InsertCollectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCollect not implemented")
}
func (UnimplementedCollectServer) GetCollect(context.Context, *GetCollectReq) (*GetCollectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollect not implemented")
}
func (UnimplementedCollectServer) GetStatus(context.Context, *GetStatusReq) (*GetStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedCollectServer) GetNum(context.Context, *GetNumReq) (*GetNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNum not implemented")
}
func (UnimplementedCollectServer) mustEmbedUnimplementedCollectServer() {}

// UnsafeCollectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectServer will
// result in compilation errors.
type UnsafeCollectServer interface {
	mustEmbedUnimplementedCollectServer()
}

func RegisterCollectServer(s grpc.ServiceRegistrar, srv CollectServer) {
	s.RegisterService(&Collect_ServiceDesc, srv)
}

func _Collect_InsertCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServer).InsertCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collect_InsertCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServer).InsertCollect(ctx, req.(*InsertCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collect_GetCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServer).GetCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collect_GetCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServer).GetCollect(ctx, req.(*GetCollectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collect_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collect_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServer).GetStatus(ctx, req.(*GetStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collect_GetNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServer).GetNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Collect_GetNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServer).GetNum(ctx, req.(*GetNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Collect_ServiceDesc is the grpc.ServiceDesc for Collect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Collect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collect.Collect",
	HandlerType: (*CollectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertCollect",
			Handler:    _Collect_InsertCollect_Handler,
		},
		{
			MethodName: "GetCollect",
			Handler:    _Collect_GetCollect_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Collect_GetStatus_Handler,
		},
		{
			MethodName: "GetNum",
			Handler:    _Collect_GetNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collect.proto",
}
