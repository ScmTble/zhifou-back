// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: tag.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tag_InsertTag_FullMethodName   = "/tag.Tag/InsertTag"
	Tag_ListTags_FullMethodName    = "/tag.Tag/ListTags"
	Tag_ListHotTags_FullMethodName = "/tag.Tag/ListHotTags"
	Tag_ListNewTags_FullMethodName = "/tag.Tag/ListNewTags"
	Tag_FindOne_FullMethodName     = "/tag.Tag/FindOne"
)

// TagClient is the client API for Tag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagClient interface {
	InsertTag(ctx context.Context, in *InsertTagReq, opts ...grpc.CallOption) (*InsertTagResp, error)
	ListTags(ctx context.Context, in *ListTagReq, opts ...grpc.CallOption) (*ListTagResp, error)
	ListHotTags(ctx context.Context, in *ListHotTagReq, opts ...grpc.CallOption) (*ListHotTagResp, error)
	ListNewTags(ctx context.Context, in *ListNewTagReq, opts ...grpc.CallOption) (*ListNewTagResp, error)
	FindOne(ctx context.Context, in *FindOneReq, opts ...grpc.CallOption) (*FindOneResp, error)
}

type tagClient struct {
	cc grpc.ClientConnInterface
}

func NewTagClient(cc grpc.ClientConnInterface) TagClient {
	return &tagClient{cc}
}

func (c *tagClient) InsertTag(ctx context.Context, in *InsertTagReq, opts ...grpc.CallOption) (*InsertTagResp, error) {
	out := new(InsertTagResp)
	err := c.cc.Invoke(ctx, Tag_InsertTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagClient) ListTags(ctx context.Context, in *ListTagReq, opts ...grpc.CallOption) (*ListTagResp, error) {
	out := new(ListTagResp)
	err := c.cc.Invoke(ctx, Tag_ListTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagClient) ListHotTags(ctx context.Context, in *ListHotTagReq, opts ...grpc.CallOption) (*ListHotTagResp, error) {
	out := new(ListHotTagResp)
	err := c.cc.Invoke(ctx, Tag_ListHotTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagClient) ListNewTags(ctx context.Context, in *ListNewTagReq, opts ...grpc.CallOption) (*ListNewTagResp, error) {
	out := new(ListNewTagResp)
	err := c.cc.Invoke(ctx, Tag_ListNewTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagClient) FindOne(ctx context.Context, in *FindOneReq, opts ...grpc.CallOption) (*FindOneResp, error) {
	out := new(FindOneResp)
	err := c.cc.Invoke(ctx, Tag_FindOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServer is the server API for Tag service.
// All implementations must embed UnimplementedTagServer
// for forward compatibility
type TagServer interface {
	InsertTag(context.Context, *InsertTagReq) (*InsertTagResp, error)
	ListTags(context.Context, *ListTagReq) (*ListTagResp, error)
	ListHotTags(context.Context, *ListHotTagReq) (*ListHotTagResp, error)
	ListNewTags(context.Context, *ListNewTagReq) (*ListNewTagResp, error)
	FindOne(context.Context, *FindOneReq) (*FindOneResp, error)
	mustEmbedUnimplementedTagServer()
}

// UnimplementedTagServer must be embedded to have forward compatible implementations.
type UnimplementedTagServer struct {
}

func (UnimplementedTagServer) InsertTag(context.Context, *InsertTagReq) (*InsertTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTag not implemented")
}
func (UnimplementedTagServer) ListTags(context.Context, *ListTagReq) (*ListTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedTagServer) ListHotTags(context.Context, *ListHotTagReq) (*ListHotTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHotTags not implemented")
}
func (UnimplementedTagServer) ListNewTags(context.Context, *ListNewTagReq) (*ListNewTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNewTags not implemented")
}
func (UnimplementedTagServer) FindOne(context.Context, *FindOneReq) (*FindOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedTagServer) mustEmbedUnimplementedTagServer() {}

// UnsafeTagServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServer will
// result in compilation errors.
type UnsafeTagServer interface {
	mustEmbedUnimplementedTagServer()
}

func RegisterTagServer(s grpc.ServiceRegistrar, srv TagServer) {
	s.RegisterService(&Tag_ServiceDesc, srv)
}

func _Tag_InsertTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).InsertTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_InsertTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).InsertTag(ctx, req.(*InsertTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tag_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).ListTags(ctx, req.(*ListTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tag_ListHotTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHotTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).ListHotTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_ListHotTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).ListHotTags(ctx, req.(*ListHotTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tag_ListNewTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNewTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).ListNewTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_ListNewTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).ListNewTags(ctx, req.(*ListNewTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tag_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).FindOne(ctx, req.(*FindOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tag_ServiceDesc is the grpc.ServiceDesc for Tag service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tag_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tag.Tag",
	HandlerType: (*TagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertTag",
			Handler:    _Tag_InsertTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _Tag_ListTags_Handler,
		},
		{
			MethodName: "ListHotTags",
			Handler:    _Tag_ListHotTags_Handler,
		},
		{
			MethodName: "ListNewTags",
			Handler:    _Tag_ListNewTags_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _Tag_FindOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tag.proto",
}
