// Code generated by goctl. DO NOT EDIT.
// Source: tag.proto

package tag

import (
	"context"

	"git.154896.xyz/zhifou/tag/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FindOneReq     = pb.FindOneReq
	FindOneResp    = pb.FindOneResp
	InsertTagReq   = pb.InsertTagReq
	InsertTagResp  = pb.InsertTagResp
	ListHotTagReq  = pb.ListHotTagReq
	ListHotTagResp = pb.ListHotTagResp
	ListNewTagReq  = pb.ListNewTagReq
	ListNewTagResp = pb.ListNewTagResp
	ListTagReq     = pb.ListTagReq
	ListTagResp    = pb.ListTagResp
	TagInfo        = pb.TagInfo

	Tag interface {
		InsertTag(ctx context.Context, in *InsertTagReq, opts ...grpc.CallOption) (*InsertTagResp, error)
		ListTags(ctx context.Context, in *ListTagReq, opts ...grpc.CallOption) (*ListTagResp, error)
		ListHotTags(ctx context.Context, in *ListHotTagReq, opts ...grpc.CallOption) (*ListHotTagResp, error)
		ListNewTags(ctx context.Context, in *ListNewTagReq, opts ...grpc.CallOption) (*ListNewTagResp, error)
		FindOne(ctx context.Context, in *FindOneReq, opts ...grpc.CallOption) (*FindOneResp, error)
	}

	defaultTag struct {
		cli zrpc.Client
	}
)

func NewTag(cli zrpc.Client) Tag {
	return &defaultTag{
		cli: cli,
	}
}

func (m *defaultTag) InsertTag(ctx context.Context, in *InsertTagReq, opts ...grpc.CallOption) (*InsertTagResp, error) {
	client := pb.NewTagClient(m.cli.Conn())
	return client.InsertTag(ctx, in, opts...)
}

func (m *defaultTag) ListTags(ctx context.Context, in *ListTagReq, opts ...grpc.CallOption) (*ListTagResp, error) {
	client := pb.NewTagClient(m.cli.Conn())
	return client.ListTags(ctx, in, opts...)
}

func (m *defaultTag) ListHotTags(ctx context.Context, in *ListHotTagReq, opts ...grpc.CallOption) (*ListHotTagResp, error) {
	client := pb.NewTagClient(m.cli.Conn())
	return client.ListHotTags(ctx, in, opts...)
}

func (m *defaultTag) ListNewTags(ctx context.Context, in *ListNewTagReq, opts ...grpc.CallOption) (*ListNewTagResp, error) {
	client := pb.NewTagClient(m.cli.Conn())
	return client.ListNewTags(ctx, in, opts...)
}

func (m *defaultTag) FindOne(ctx context.Context, in *FindOneReq, opts ...grpc.CallOption) (*FindOneResp, error) {
	client := pb.NewTagClient(m.cli.Conn())
	return client.FindOne(ctx, in, opts...)
}
