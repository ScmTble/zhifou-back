// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	collect "git.154896.xyz/zhifou/app/internal/handler/collect"
	comment "git.154896.xyz/zhifou/app/internal/handler/comment"
	dynamic "git.154896.xyz/zhifou/app/internal/handler/dynamic"
	like "git.154896.xyz/zhifou/app/internal/handler/like"
	tag "git.154896.xyz/zhifou/app/internal/handler/tag"
	user "git.154896.xyz/zhifou/app/internal/handler/user"
	"git.154896.xyz/zhifou/app/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/auth/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/auth/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user",
				Handler: user.GetInfoHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/user/info",
					Handler: user.InfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/tags",
				Handler: tag.ListTagHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tag/:id",
				Handler: tag.QueryTagHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/post",
					Handler: dynamic.InsertDynamicHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/posts",
				Handler: dynamic.GetDynamicHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/post/:id",
				Handler: dynamic.GetDynamicDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/query_tag",
				Handler: dynamic.QueryDynamicHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/query_user",
				Handler: dynamic.QueryUserHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/comments/:post_id",
				Handler: comment.GetCommentsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/comment",
					Handler: comment.InsertCommentHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/collect",
					Handler: collect.InsertCollectHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/collect",
					Handler: collect.GetCollectHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.JwtAuth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/like",
					Handler: like.InsertUpvoteHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)
}
